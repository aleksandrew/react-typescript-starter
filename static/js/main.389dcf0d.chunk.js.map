{"version":3,"sources":["constants/types.ts","reducers/app.ts","constants/routes.ts","reducers/action.ts","pages/main/index.tsx","components/Loader.tsx","services/api.ts","sagas/app.ts","sagas/index.ts","store.ts","serviceWorker.ts","index.tsx","pages/index.tsx"],"names":["TYPES","ROUTES","initialState","data","currentPage","selector","state","app","action","type","options","DATA","payload","getData","page","GET_DATA","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","footerBtn","marginTop","padding","borderRadius","btn","position","top","right","zIndex","Main","memo","classes","useSelector","dispatch","useDispatch","getDataRequest","useCallback","useState","isVisible","id","visible","setVisible","showMoreImage","isVisibleTitle","currentData","useMemo","_","map","item","user","tags","largeImageURL","Container","className","IconButton","color","aria-label","href","GridList","cellHeight","GridListTile","key","cols","style","ListSubheader","component","tile","onMouseLeave","onMouseEnter","src","alt","Slide","direction","in","GridListTileBar","title","subtitle","Button","fullWidth","variant","onClick","alignItems","Loader","progress","setProgress","useEffect","timer","setInterval","oldProgress","clearInterval","CircularProgress","size","value","instance","axios","create","baseURL","method","url","then","response","hits","getImage","select","call","uploadedData","length","put","console","warn","takeEvery","sagasRoot","fork","rootReducer","combineReducers","form","formReducer","sagaMiddleware","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","Boolean","location","hostname","match","ReactDOM","render","basename","process","path","MAIN","exact","from","to","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6LAwCYA,E,gxBAAAA,K,oBAAAA,E,6BAAAA,M,KCjCZ,ICPYC,EDONC,EAA4B,CAC9BC,KAAM,GACNC,YAAa,GAGJC,EAAW,SAACC,GAAD,OAAsBA,EAAMC,KAcrCA,EAZmB,WAAmC,IAAlCD,EAAiC,uDAAzBJ,EAAcM,EAAW,uCACxDC,EAAqBD,EAArBC,KAASC,EAD+C,YACnCF,EADmC,UAGhE,OAAQC,GACJ,KAAKT,EAAMW,KACP,OAAO,EAAP,GAAYL,EAAZ,GAAsBI,EAAQE,SAElC,QACI,OAAON,I,QEhBNK,EAAO,SAACR,GAAD,IAAeC,EAAf,uDAAqC,EAArC,OAA2CI,iBAAOR,EAAMW,KAAM,CAAER,OAAMC,iBAE7ES,EAAU,SAACC,GAAD,OAA0BN,iBAAOR,EAAMe,SAAU,CAAED,UCcpEE,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBP,EAAMQ,QAAQC,WAAWC,OAE9CC,SAAU,CACNC,MAAO,OACPC,OAAQ,OACRR,eAAgB,UAEpBS,UAAW,CACPC,UAAW,GACXC,QAAS,SACTC,aAAc,GAElBC,IAAK,CACDC,SAAU,QACVC,IAAK,GACLC,MAAO,EACPlB,QAAS,QACTI,gBAAiB,OACjBe,OAAQ,QAqGLC,EAlFFC,gBAAa,WACtB,IAAMC,EAAU3B,IADY,EAGE4B,YAAYvC,GAAlCF,EAHoB,EAGpBA,KAAMC,EAHc,EAGdA,YAERyC,EAAWC,cACXC,EAAiBC,uBAAY,SAAClC,GAAD,OAAkB+B,EAAShC,EAAQC,MAAQ,CAAC+B,IANnD,EAQEI,mBAAmB,CAAEC,WAAW,EAAOC,GAAI,OAR7C,mBAQrBC,EARqB,KAQZC,EARY,KAUtBC,EAAgBN,uBAAY,WAC9BD,EAAe3C,EAAc,KAC9B,CAACA,EAAa2C,IAEXQ,EAAiBP,uBACnB,WAA+B,IAA9BG,EAA6B,uDAAT,KACbA,IAAOC,EAAQF,UACfG,EAAW,CAAEH,WAAW,EAAMC,OACvBC,EAAQF,WACfG,EAAW,CAAEH,WAAW,EAAOC,GAAI,SAG3C,CAACC,IAGCI,EAAcC,mBAChB,kBACIC,IAAEC,IAAIxD,GAAM,SAACyD,GAAD,MAAiB,CACzBT,GAAIS,EAAKT,GACTU,KAAMD,EAAKC,KACXC,KAAMF,EAAKE,KACXC,cAAeH,EAAKG,oBAE5B,CAAC5D,IAGL,OACI,kBAAC6D,EAAA,EAAD,KACI,yBAAKC,UAAWtB,EAAQP,KACpB,kBAAC8B,EAAA,EAAD,CACIC,MAAM,UACNC,aAAW,eACXC,KAAK,2DAEL,kBAAC,IAAD,QAIR,yBAAKJ,UAAWtB,EAAQvB,MACpB,kBAACkD,EAAA,EAAD,CAAUC,WAAY,IAAKN,UAAWtB,EAAQd,UAC1C,kBAAC2C,EAAA,EAAD,CAAcC,IAAI,YAAYC,KAAM,EAAGC,MAAO,CAAE5C,OAAQ,OAAQD,MAAO,SACnE,kBAAC8C,EAAA,EAAD,CAAeC,UAAU,OAAzB,UAEHnB,IAAEC,IAAIH,GAAa,SAACsB,GAAD,OAChB,kBAACN,EAAA,EAAD,CACIC,IAAKK,EAAK3B,GACVwB,MAAO,CAAE7C,MAAO,OAChBiD,aAAc,kBAAMxB,KACpByB,aAAc,kBAAMzB,EAAeuB,EAAK3B,MAExC,yBAAK8B,IAAKH,EAAKf,cAAemB,IAAKJ,EAAKjB,OACxC,kBAACsB,EAAA,EAAD,CAAOC,UAAU,KAAKC,GAAIjC,EAAQD,KAAO2B,EAAK3B,IAC1C,kBAACmC,EAAA,EAAD,CAAiBC,MAAK,gBAAWT,EAAKhB,MAAQ0B,SAAU,qCAAWV,EAAKjB,cAMxF,kBAAC4B,EAAA,EAAD,CACIC,WAAS,EACTvB,MAAM,UACNwB,QAAQ,YACRC,QAAStC,EACTW,UAAWtB,EAAQX,WALvB,kB,SC/HVhB,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,QAAS,OACTE,eAAgB,SAChBsE,WAAY,SACZ/D,MAAO,QACPC,OAAQ,cAKL,SAAS+D,IACpB,IAAMnD,EAAU3B,IADa,EAEGiC,mBAAS,GAFZ,mBAEtB8C,EAFsB,KAEZC,EAFY,KAgB7B,OAZAC,qBAAU,WAMN,IAAMC,EAAQC,aALd,WAEIH,GAAY,SAACI,GAAD,OAAkBA,GAAe,IAAM,EAAIA,EAAc,OAGzC,IAChC,OAAO,WACHC,cAAcH,MAEnB,IAGC,yBAAKjC,UAAWtB,EAAQvB,MACpB,kBAACkF,EAAA,EAAD,CAAkBC,KAAK,OAAOZ,QAAQ,cAAca,MAAOT,EAAU5B,MAAM,gB,SHrC3ElE,K,cAAAA,M,mFIMNwG,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,sFAGA/F,EAAU,WAAuB,IAAtBC,EAAqB,uDAAN,EACnC,OAAO2F,EAAS,CAAEI,OAAQ,MAAOC,IAAI,SAAD,OAAWhG,KAAUiG,MAAK,SAACC,GAAD,OAAcA,EAAS7G,KAAK8G,S,WCHpFC,I,gBAAV,SAAUA,GAAV,kFAEwB,OAFAtG,EAAxB,kBACYE,EAASF,EAAQA,QAAjBE,KADZ,SAE8BqG,aAAO,SAAC7G,GAAD,OAAWA,EAAMC,IAAIJ,QAF1D,OAK6B,OAHnBqD,EAFV,yBAKmC4D,YAAKvG,EAASC,GALjD,OAQQ,OAHMuG,EALd,OAMclH,EAA8B,IAAvBqD,EAAY8D,OAAZ,YAA+BD,GAA/B,sBAAmD7D,GAAnD,YAAmE6D,IANxF,UAQcE,YAAI5G,EAAKR,EAAMW,IAR7B,0DAUQ0G,QAAQC,KAAR,MAVR,sDAce,+EACX,OADW,SACLC,YAAU1H,EAAMe,SAAUmG,IADrB,wC,gBChBLS,IAAV,SAAUA,KAAV,iEACI,OADJ,SACUC,YAAKrH,IADf,wCAIeoH,UCDTE,GAAcC,YAAgB,CAChCvH,IAAKA,EACLwH,KAAMC,MAOJC,GAAsBC,cAGtBC,GAAmBC,OAAOC,sCAAwCC,IAElEC,GAAQC,YAAYX,GAAaM,GAAiBM,YAAgBR,MAExEA,GAAeS,IAAIf,IAEJY,UCfKI,QACa,cAA7BP,OAAOQ,SAASC,UAEiB,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MAAM,2DCNvCC,IAASC,OACL,kBAAC,IAAD,CAAYC,SAAUC,6BAClB,kBAAC,IAAD,CAAUX,MAAOA,IACb,mBCFG,WAAgB,IAAD,EACI3F,YAAYvC,GAAlCF,EADkB,EAClBA,KAAMC,EADY,EACZA,YAERyC,EAAWC,cACXC,EAAiBC,uBAAY,SAAClC,GAAD,OAAkB+B,EAAShC,EAAQC,MAAQ,CAAC+B,IAQ/E,OANAoD,qBAAU,WACc,IAAhB9F,EAAKmH,QACLvE,EAAe3C,KAEpB,CAACD,EAAM4C,EAAgB3C,IAGtB,oCACqB,IAAhBD,EAAKmH,OACF,kBAACxB,EAAD,MAEA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOqD,KAAMlJ,EAAOmJ,KAAMvE,UAAWpC,IACrC,kBAAC,IAAD,CAAU4G,OAAK,EAACC,KAAK,IAAIC,GAAItJ,EAAOmJ,WDjB5C,QAGRI,SAASC,eAAe,SDgHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB7C,MAAK,SAAC8C,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.389dcf0d.chunk.js","sourcesContent":["// outsource dependencies\r\n\r\n// local dependencies\r\n\r\nexport interface Hits {\r\n    comments: number;\r\n    downloads: number;\r\n    favorites: number;\r\n    id: number;\r\n    imageHeight: number;\r\n    imageSize: number;\r\n    imageWidth: number;\r\n    largeImageURL: string;\r\n    likes: number;\r\n    pageURL: string;\r\n    previewHeight: number;\r\n    previewURL: string;\r\n    previewWidth: number;\r\n    tags: string;\r\n    type: string;\r\n    user: string;\r\n    userImageURL: string;\r\n    user_id: number;\r\n    views: number;\r\n    webformatHeight: number;\r\n    webformatURL: string;\r\n    webformatWidth: number;\r\n}\r\n\r\nexport interface BaseApiResponse {\r\n    readonly hits: Array<Hits>;\r\n    readonly total: number;\r\n    readonly totalHits: number;\r\n}\r\n\r\nexport interface DataPayload {\r\n    data: Array<Hits>;\r\n    currentPage: number;\r\n}\r\n\r\nexport enum TYPES {\r\n    DATA = '@prefix/DATA',\r\n    GET_DATA = '@prefix/GET_DATA',\r\n}\r\n","// outsource dependencies\r\nimport { Reducer } from 'redux';\r\n\r\n// local dependencies\r\nimport { StateType } from '../store';\r\nimport { DataPayload, TYPES } from '../constants/types';\r\n\r\nconst initialState: DataPayload = {\r\n    data: [],\r\n    currentPage: 1,\r\n};\r\n\r\nexport const selector = (state: StateType) => state.app;\r\n\r\nconst app: Reducer<DataPayload> = (state = initialState, action) => {\r\n    const { type, ...options } = action;\r\n\r\n    switch (type) {\r\n        case TYPES.DATA:\r\n            return { ...state, ...options.payload };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default app;\r\n","export enum ROUTES {\r\n    MAIN = '/main',\r\n}\r\n","// outsource dependencies\r\nimport { action } from 'typesafe-actions';\r\n\r\n// local dependencies\r\nimport { Hits, TYPES } from '../constants/types';\r\n\r\nexport const DATA = (data: Hits[], currentPage: number = 1) => action(TYPES.DATA, { data, currentPage });\r\n\r\nexport const getData = (page: number | never) => action(TYPES.GET_DATA, { page });\r\n","// outsource dependencies\r\nimport _ from 'lodash';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport React, { memo, useState, useCallback, useMemo } from 'react';\r\nimport {\r\n    Button,\r\n    Container,\r\n    GridList,\r\n    GridListTile,\r\n    GridListTileBar,\r\n    IconButton,\r\n    ListSubheader,\r\n    Slide,\r\n} from '@material-ui/core';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\n// local dependencies\r\nimport { Hits } from '../../constants/types';\r\nimport { selector } from '../../reducers/app';\r\nimport { getData } from '../../reducers/action';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'space-around',\r\n            overflow: 'hidden',\r\n            backgroundColor: theme.palette.background.paper,\r\n        },\r\n        gridList: {\r\n            width: '100%',\r\n            height: '100%',\r\n            justifyContent: 'center',\r\n        },\r\n        footerBtn: {\r\n            marginTop: 20,\r\n            padding: '20px 0',\r\n            borderRadius: 0,\r\n        },\r\n        btn: {\r\n            position: 'fixed',\r\n            top: 10,\r\n            right: 0,\r\n            display: 'block',\r\n            backgroundColor: '#000',\r\n            zIndex: 2,\r\n        },\r\n    })\r\n);\r\n\r\ninterface IProps {}\r\n\r\ninterface ICurrentData {\r\n    id: string;\r\n    user: string;\r\n    tags: string;\r\n    largeImageURL: string;\r\n}\r\n\r\ninterface IVisible {\r\n    id: string | null;\r\n    isVisible: boolean;\r\n}\r\n\r\nconst Main = memo<IProps>(() => {\r\n    const classes = useStyles();\r\n\r\n    const { data, currentPage } = useSelector(selector);\r\n\r\n    const dispatch = useDispatch();\r\n    const getDataRequest = useCallback((page: number) => dispatch(getData(page)), [dispatch]);\r\n\r\n    const [visible, setVisible] = useState<IVisible>({ isVisible: false, id: null });\r\n\r\n    const showMoreImage = useCallback(() => {\r\n        getDataRequest(currentPage + 1);\r\n    }, [currentPage, getDataRequest]);\r\n\r\n    const isVisibleTitle = useCallback(\r\n        (id: string | null = null) => {\r\n            if (id || !visible.isVisible) {\r\n                setVisible({ isVisible: true, id });\r\n            } else if (visible.isVisible) {\r\n                setVisible({ isVisible: false, id: null });\r\n            }\r\n        },\r\n        [visible]\r\n    );\r\n\r\n    const currentData = useMemo(\r\n        () =>\r\n            _.map(data, (item: Hits) => ({\r\n                id: item.id,\r\n                user: item.user,\r\n                tags: item.tags,\r\n                largeImageURL: item.largeImageURL,\r\n            })),\r\n        [data]\r\n    );\r\n\r\n    return (\r\n        <Container>\r\n            <div className={classes.btn}>\r\n                <IconButton\r\n                    color=\"primary\"\r\n                    aria-label=\"go to gitHub\"\r\n                    href=\"https://github.com/aleksandrew/react-typescript-starter\"\r\n                >\r\n                    <GitHubIcon />\r\n                </IconButton>\r\n            </div>\r\n\r\n            <div className={classes.root}>\r\n                <GridList cellHeight={180} className={classes.gridList}>\r\n                    <GridListTile key=\"Subheader\" cols={3} style={{ height: 'auto', width: '100%' }}>\r\n                        <ListSubheader component=\"div\">Image</ListSubheader>\r\n                    </GridListTile>\r\n                    {_.map(currentData, (tile: ICurrentData) => (\r\n                        <GridListTile\r\n                            key={tile.id}\r\n                            style={{ width: '33%' }}\r\n                            onMouseLeave={() => isVisibleTitle()}\r\n                            onMouseEnter={() => isVisibleTitle(tile.id)}\r\n                        >\r\n                            <img src={tile.largeImageURL} alt={tile.user} />\r\n                            <Slide direction=\"up\" in={visible.id === tile.id}>\r\n                                <GridListTileBar title={`tags: ${tile.tags}`} subtitle={<span>by: {tile.user}</span>} />\r\n                            </Slide>\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n\r\n                <Button\r\n                    fullWidth\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={showMoreImage}\r\n                    className={classes.footerBtn}\r\n                >\r\n                    show more\r\n                </Button>\r\n            </div>\r\n        </Container>\r\n    );\r\n});\r\n\r\nexport default Main;\r\n","// outsource dependencies\r\nimport React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// local dependencies\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            width: '100vw',\r\n            height: '100vh',\r\n        },\r\n    })\r\n);\r\n\r\nexport default function Loader() {\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = useState(0);\r\n\r\n    useEffect(() => {\r\n        function tick() {\r\n            // reset when reaching 100%\r\n            setProgress((oldProgress) => (oldProgress >= 100 ? 0 : oldProgress + 1));\r\n        }\r\n\r\n        const timer = setInterval(tick, 20);\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress size=\"20vw\" variant=\"determinate\" value={progress} color=\"secondary\" />\r\n        </div>\r\n    );\r\n}\r\n","// outsource dependencies\r\nimport axios from 'axios';\r\n\r\n// local dependencies\r\nimport { BaseApiResponse } from '../constants/types';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://pixabay.com/api/?key=16536208-9fc62eea32cdbf6ba7c4bd885&per_page=9&page=1',\r\n});\r\n\r\nexport const getData = (page: number = 1) => {\r\n    return instance({ method: 'get', url: `&page=${page}` }).then((response) => response.data.hits) as Promise<\r\n        BaseApiResponse\r\n    >;\r\n};\r\n","// outsource dependencies\r\nimport { takeEvery, put, call, select } from 'redux-saga/effects';\r\n\r\n// local dependencies\r\nimport { getData } from '../services/api';\r\nimport { DATA } from '../reducers/action';\r\nimport { TYPES } from '../constants/types';\r\n\r\nfunction* getImage({ ...payload }) {\r\n    const { page } = payload.payload;\r\n    const currentData = yield select((state) => state.app.data);\r\n\r\n    try {\r\n        const uploadedData = yield call(getData, page);\r\n        const data = currentData.length === 0 ? [...uploadedData] : [...currentData, ...uploadedData];\r\n\r\n        yield put(DATA(data, page));\r\n    } catch (e) {\r\n        console.warn(e);\r\n    }\r\n}\r\n\r\nexport default function* () {\r\n    yield takeEvery(TYPES.GET_DATA, getImage);\r\n}\r\n","// outsource dependencies\r\nimport { fork } from 'redux-saga/effects';\r\n\r\n// local dependencies\r\nimport app from './app';\r\n\r\nfunction* sagasRoot() {\r\n    yield fork(app);\r\n}\r\n\r\nexport default sagasRoot;\r\n","// outsource dependencies\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport { compose, applyMiddleware, combineReducers, createStore } from 'redux';\r\n\r\n// local dependencies\r\nimport sagasRoot from './sagas';\r\nimport app from './reducers/app';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: app,\r\n    form: formReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type StateType = ReturnType<RootReducerType>;\r\n\r\nconst sagaMiddleware: any = createSagaMiddleware();\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(sagasRoot);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. Index is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","// outsource dependencies\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\n// local dependencies\r\nimport App from './pages';\r\nimport store from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <HashRouter basename={process.env.PUBLIC_URL}>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// outsource dependencies\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router';\r\n\r\n// local dependencies\r\nimport Main from './main';\r\nimport Loader from '../components/Loader';\r\nimport { selector } from '../reducers/app';\r\nimport { ROUTES } from '../constants/routes';\r\nimport { getData } from '../reducers/action';\r\n\r\nexport default function App() {\r\n    const { data, currentPage } = useSelector(selector);\r\n\r\n    const dispatch = useDispatch();\r\n    const getDataRequest = useCallback((page: number) => dispatch(getData(page)), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (data.length === 0) {\r\n            getDataRequest(currentPage);\r\n        }\r\n    }, [data, getDataRequest, currentPage]);\r\n\r\n    return (\r\n        <>\r\n            {data.length === 0 ? (\r\n                <Loader />\r\n            ) : (\r\n                <Switch>\r\n                    <Route path={ROUTES.MAIN} component={Main} />\r\n                    <Redirect exact from=\"/\" to={ROUTES.MAIN} />\r\n                </Switch>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n"],"sourceRoot":""}